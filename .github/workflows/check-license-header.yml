name: Validate SPDX License year and company mention in currently changed Files

on:
  pull_request:
    branches: [main]
    types:
      - opened
      - reopened
      - synchronize
      - assigned
      - review_requested

jobs:
  check-spdx-license:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Install yq
        run: pip install yq

      - name: Read ignored paths from config
        id: read-ignored-paths
        run: |
          # Read included paths from the DEFAULT section
          included_paths=$(yq e '.DEFAULT.include // empty' check_copyright_config.yaml)
          if [ -z "$included_paths" ]; then
            echo "No included paths found in DEFAULT section or .include key is missing"
            echo "included_paths=" >> $GITHUB_ENV
          else
            included_paths=$(echo "$included_paths" | tr '\n' ' ')
            echo "included_paths=$included_paths" >> $GITHUB_ENV
          fi

          # Read ignored paths from the ignore section
          ignored_paths=$(yq e '.ignore.include // empty' check_copyright_config.yaml)
          if [ -z "$ignored_paths" ]; then
            echo "No ignored paths found in ignore section or .include key is missing"
            echo "ignored_paths=" >> $GITHUB_ENV
          else
            ignored_paths=$(echo "$ignored_paths" | tr '\n' ' ')
            echo "ignored_paths=$ignored_paths" >> $GITHUB_ENV
          fi

          # Debug output to verify paths
          echo "Included paths: $included_paths"
          echo "Ignored paths: $ignored_paths"
        env:
          GITHUB_ENV: $GITHUB_ENV

      - name: Identify currently changed files and check licenses
        id: check-licenses
        run: |
          current_year=$(date +"%Y")  # Dynamically set current year for checking
          echo "current_year=$current_year" >> $GITHUB_ENV  # Export current year to environment variables
          missing_license_files=""
          for file in $(git diff --name-only ${{ github.event.pull_request.base.sha }}...HEAD | grep '\.py$'); do
            # Skip ignored paths
            skip_file=false
            for ignored in $ignored_paths; do
              if [[ "$file" == $ignored || "$file" == $ignored/* ]]; then
                skip_file=true
                break
              fi
            done
            if $skip_file; then
              continue
            fi

            # Check if file contains the correct SPDX license identifier and the exact copyright statement with dynamic current year
            if ! grep -q "SPDX-License-Identifier: Apache-2.0" "$file" || ! grep -q "SPDX-FileCopyrightText: Â© $current_year Tenstorrent AI ULC" "$file"; then
              missing_license_files="$missing_license_files$file "
            fi
          done
          echo "missing_license_files=$missing_license_files" >> $GITHUB_ENV
          echo "Checked files for correct SPDX-License compliance."

      - name: Comment on PR about incorrect SPDX licenses
        if: env.missing_license_files != ''
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const missingFiles = process.env.missing_license_files.trim().replace(/\s+/g, '\n');
            const currentYear = process.env.current_year;
            const commentBody = `The following files are not compliant with the required licensing standards for ${currentYear} or do not contain the correct copyright text 'Tenstorrent AI ULC' within their license header:\n\`\`\`\n${missingFiles}\n\`\`\`\nPlease update the files accordingly. Your attention and cooperation in this matter are greatly appreciated.\nThank you.`;
            
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: owner,
              repo: repo,
              body: commentBody
            });

      - name: Fail the workflow if license issues are found
        if: env.missing_license_files != ''
        run: |
          echo "Failing the workflow due to non-compliance with SPDX license requirements."
          exit 1
